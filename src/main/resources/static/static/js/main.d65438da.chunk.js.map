{"version":3,"sources":["components/header.tsx","components/content.tsx","components/footer.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["Header","id","src","alt","title","href","size","Content","placeholder","type","Footer","App","className","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"+NAqBeA,EAhBA,WACd,OACC,yBAAKC,GAAG,UACP,yBAAKA,GAAG,OACP,yBAAKA,GAAG,OAAOC,IAAI,eAAeC,IAAI,SACtC,yBAAKF,GAAG,SAAR,UACA,yBAAKA,GAAG,OACP,kBAAC,IAAD,CAASG,MAAM,WACd,uBAAGC,KAAK,uBAAsB,kBAAC,IAAD,CAAQC,KAAK,QAAQJ,IAAI,sB,iCCmB9CK,EA1BC,WACf,OACC,yBAAKN,GAAG,WACP,yBAAKA,GAAG,OACP,yBAAKA,GAAG,QACP,wFACA,wFACA,wFACA,wFACA,yFAED,yBAAKA,GAAG,SACP,kBAAC,IAAD,CAAOO,YAAY,cAAcF,KAAK,UACtC,kBAAC,IAAD,CAAQG,KAAK,UAAUH,KAAK,SAA5B,OAAwC,kBAAC,IAAD,CAAMG,KAAK,mBAEpD,yBAAKR,GAAG,YACP,+BAED,yBAAKA,GAAG,YCZGS,G,OATA,WACd,OACC,yBAAKT,GAAG,UACP,yBAAKA,GAAG,aAAR,eAA6B,uBAAGI,KAAK,uBAAR,YAC7B,yBAAKJ,GAAG,aAAR,UAA2B,uBAAGI,KAAK,6BAAR,UAA3B,MAA4E,uBAAGA,KAAK,uBAAR,aC6BhEM,G,OA1BH,WACV,OAiBE,yBAAKC,UAAU,OACb,kBAAC,EAAD,MACA,kBAAC,EAAD,MACA,kBAAC,EAAD,SCnBcC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SDqI3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,iB","file":"static/js/main.d65438da.chunk.js","sourcesContent":["import React from 'react';\r\nimport './header.less';\r\n\r\nimport { Avatar, Tooltip } from 'antd';\r\n\r\nconst Header = () => {\r\n\treturn (\r\n\t\t<div id=\"header\">\r\n\t\t\t<div id=\"nav\">\r\n\t\t\t\t<img id=\"logo\" src=\"/favicon.ico\" alt=\"logo\" />\r\n\t\t\t\t<div id=\"title\">Typing</div>\r\n\t\t\t\t<div id=\"btn\">\r\n\t\t\t\t\t<Tooltip title=\"Akijoey\">\r\n\t\t\t\t\t\t<a href=\"https://akijoey.com\"><Avatar size=\"large\" src=\"/avatar.png\" /></a>\r\n\t\t\t\t\t</Tooltip>\r\n\t\t\t\t</div>\r\n\t\t\t</div>\r\n\t\t</div>\r\n\t);\r\n}\r\n\r\nexport default Header;","import React from 'react';\r\nimport './content.less';\r\n\r\nimport { message, Icon, Button, Input, Table } from 'antd';\r\nimport axios from 'axios';\r\n\r\nconst Content = () => {\r\n\treturn (\r\n\t\t<div id=\"content\">\r\n\t\t\t<div id=\"box\">\r\n\t\t\t\t<div id=\"text\">\r\n\t\t\t\t\t<span>test test test test test test test test test test test</span>\r\n\t\t\t\t\t<span>test test test test test test test test test test test</span>\r\n\t\t\t\t\t<span>test test test test test test test test test test test</span>\r\n\t\t\t\t\t<span>test test test test test test test test test test test</span>\r\n\t\t\t\t\t<span>test test test test test test test test test test test</span>\r\n\t\t\t\t</div>\r\n\t\t\t\t<div id=\"input\">\r\n\t\t\t\t\t<Input placeholder=\"Basic usage\" size=\"large\" />\r\n\t\t\t\t\t<Button type=\"primary\" size=\"large\">Next<Icon type=\"right-square\" /></Button>\r\n\t\t\t\t</div>\r\n\t\t\t\t<div id=\"keyboard\">\r\n\t\t\t\t\t<div></div>\r\n\t\t\t\t</div>\r\n\t\t\t\t<div id=\"data\">\r\n\r\n\t\t\t\t</div>\r\n\t\t\t</div>\r\n\t\t</div>\r\n\t);\r\n}\r\n\r\nexport default Content;","import React from 'react';\r\nimport './footer.less';\r\n\r\nconst Footer = () => {\r\n\treturn (\r\n\t\t<div id=\"footer\">\r\n\t\t\t<div id=\"copyright\">Â©2019 By <a href=\"https://akijoey.com\">AkiJoey</a></div>\r\n\t\t\t<div id=\"framework\">Driven <a href=\"https://djangoproject.com\">Django</a> + <a href=\"https://reactjs.org\">React</a></div>\r\n\t\t</div>\r\n\t);\r\n}\r\n\r\nexport default Footer;","import React from 'react';\n// import logo from './logo.svg';\nimport './App.css';\n\nimport Header from './components/header';\nimport Content from './components/content';\nimport Footer from './components/footer';\n\nimport 'antd/dist/antd.less';\n\nconst App = () => {\n  return (\n    // <div className=\"App\">\n    //   <header className=\"App-header\">\n    //     <img src={logo} className=\"App-logo\" alt=\"logo\" />\n    //     <p>\n    //       Edit <code>src/App.tsx</code> and save to reload.\n    //     </p>\n    //     <a\n    //       className=\"App-link\"\n    //       href=\"https://reactjs.org\"\n    //       target=\"_blank\"\n    //       rel=\"noopener noreferrer\"\n    //     >\n    //       Learn React\n    //     </a>\n    //   </header>\n    // </div>\n    <div className=\"App\">\n      <Header />\n      <Content />\n      <Footer />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}